//Names:
//Mason Gil, megil
//Andrei Baechle, abaechle

//THIS IS BASICALLY MAIN, IT RUNS FIRST AND KILLS THE PROGRAM
ADD X0, XZR, XZR
ADDI X1, XZR, #15
BL FILL
ADD X0, XZR, XZR
ADDI X1, XZR, #15
BL BUBBLE_SORT
DUMP
BL EXIT

SWAP:
    LDUR X10, [X0, #0]
    LDUR X11, [X1, #0]
    STUR X11, [X0, #0]
    STUR X10, [X1, #0]

    BR LR

COMPARE: //X0 IS THE ADDRESS, X1 IS THE RETURN VALUE

    SUBI SP, SP, #8 //MAKE SPACE ON THE STACK
    STUR LR, [SP, #0] //STORE LR ON THE STACK

    LDUR X10, [X0, #0]
    LDUR X11, [X0, #8]
    SUBS X27, X10, X11
    B.LE COMPARE_LESS
    ADDI X1, XZR, #1
    BL COMPARE_END
    COMPARE_LESS:
        ADD X1, XZR, XZR
        BL COMPARE_END
    COMPARE_END:
        LDUR LR, [SP, #0] //PULL OUT THE VALUE OF LR WE WANT
        ADDI SP, SP, #8 //RESTORE SP
        BR LR

FILL: //X0 IS ARRAY STARTING POINT, X1 IS LENGTH
    SUBI SP, SP, #8 //MAKE SPACE ON THE STACK
    STUR LR, [SP, #0] //STORE LR ON THE STACK
    BL BUILDREVERSELOOP
    BUILDREVERSELOOP:
        STUR X1, [X0, #0]
        SUBI X1, X1, #1
        ADDI X0, X0, #8
        CBNZ X1, BUILDREVERSELOOP
        LDUR LR, [SP, #0] //PULL OUT THE VALUE OF LR WE WANT
        ADDI SP, SP, #8 //RESTORE SP
        BR LR

PERCOLATE: //X0 IS ADDR, X1 IS SIZE
    SUBI SP, SP, #8 //MAKE SPACE ON THE STACK
    STUR LR, [SP, #0] //STORE LR ON THE STACK

    ADD X18, XZR, X0 //X18 HOLDS THE ADDRESS WE LOOPING THROUGH
    SUBI X19, X1, #1 //X19 HOLDS LENGTH
    BL PERCOLATE_LOOP
    PERCOLATE_LOOP:
        ADD X0, XZR, X18
        BL COMPARE
        CBNZ X1, PERCOLATE_SWAP
        
        BL PERCOLATE_LOOP_CONTINUE
        PERCOLATE_SWAP:
            ADD X0, XZR, X18
            ADDI X1, X0, #8
            BL SWAP
        PERCOLATE_LOOP_CONTINUE:
            SUBI X19, X19, #1
            CBZ X19, PERCOLATE_END
            ADDI X18, X18, #8
            BL PERCOLATE_LOOP
    PERCOLATE_END:
        LDUR LR, [SP, #0] //PULL OUT THE VALUE OF LR WE WANT
        ADDI SP, SP, #8 //RESTORE SP
        BR LR 

BUBBLE_SORT: //X0 ARR ADDR, X1 ARR LENGTH
    SUBI SP, SP, #8 //MAKE SPACE ON THE STACK
    STUR LR, [SP, #0] //STORE LR ON THE STACK

    ADD X14, XZR, X0 //STORE ARR POINTER
    ADD X15, X1, XZR //STORE ARR LEN
    SUBI X16, X1, #1 //LOOP ITER COUNTER

    BL BUBBLE_LOOP
    BUBBLE_LOOP:
        ADD X0, XZR, X14
        ADD X1, XZR, X15
        BL PERCOLATE
        CBZ X16, BUBBLE_END
        SUBI X16, X16, #1
        BL BUBBLE_LOOP

    BUBBLE_END:
        LDUR LR, [SP, #0] //PULL OUT THE VALUE OF LR WE WANT
        ADDI SP, SP, #8 //RESTORE SP
        BR LR  


EXIT: